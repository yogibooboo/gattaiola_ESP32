#include <Arduino.h>
#include <driver/i2s.h>
#include <driver/adc.h>
#include <U8g2lib.h>

// Definizioni PWM
#define PWM_PIN 13
#define PWM_CHANNEL 0
#define PWM_FREQ 134200    // 134.2 kHz
#define PWM_RESOLUTION 8   // 8-bit resolution

// Definizioni I2S e ADC
#define I2S_PORT I2S_NUM_0
#define ADC_CHANNEL ADC1_CHANNEL_3  // GPIO39
#define BUFFER_SIZE 5000
uint16_t adc_buffer[BUFFER_SIZE];

// Definizione display OLED corretta
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ 15, /* data=*/ 4, /* reset=*/ 16);

int32_t frequenza=PWM_FREQ;
int statoconta=0;

// Variabili globali
volatile bool rfidDetected = false;
volatile unsigned long rfidDetectedTime = 0;
const unsigned long rfidTimeout = 5000;


#define pblack 12
#define pred 14
#define pyellow 27
#define ledverde 21

void setup() {
    pinMode(pblack, INPUT_PULLUP);
    pinMode(pred, INPUT_PULLUP);
    pinMode(pyellow, INPUT_PULLUP);
    pinMode(ledverde, OUTPUT); 
  
    Serial.begin(115200);
    

    // Inizializzazione display OLED
    if (!u8g2.begin()) {
        Serial.println("Errore: inizializzazione display fallita!");
        while (1);
    }
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(0, 10, "Gattaiola ESP32");
    u8g2.drawStr(0, 20, "In attesa...");
    u8g2.sendBuffer();

    // Configurazione PWM
    ledcSetup(PWM_CHANNEL, frequenza, 4);
    ledcAttachPin(PWM_PIN, PWM_CHANNEL);
    ledcWrite(PWM_CHANNEL, 8); // 50% duty cycle

    // Configurazione ADC
    adc1_config_width(ADC_WIDTH_BIT_12);
    adc1_config_channel_atten(ADC_CHANNEL, ADC_ATTEN_DB_12);

    // Configurazione I2S
    i2s_config_t i2s_config = {
        .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX | I2S_MODE_ADC_BUILT_IN),
        .sample_rate = 50000,
        .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
        .communication_format = I2S_COMM_FORMAT_STAND_I2S,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
        .dma_buf_count = 8,
        .dma_buf_len = 64,
        .use_apll = false,
        .tx_desc_auto_clear = false,
        .fixed_mclk = 0
    };

    esp_err_t err = i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
    if (err != ESP_OK) {
        Serial.printf("Errore installazione I2S: %d\n", err);
        while (1);
    }

    err = i2s_set_adc_mode(ADC_UNIT_1, ADC_CHANNEL);
    if (err != ESP_OK) {
        Serial.printf("Errore configurazione ADC per I2S: %d\n", err);
        while (1);
    }

    err = i2s_adc_enable(I2S_PORT);
    if (err != ESP_OK) {
        Serial.printf("Errore abilitazione ADC per I2S: %d\n", err);
        while (1);
    }

    Serial.println("Setup completato");
}

void loop() {
    // Lettura ADC via I2S
    size_t bytes_read;
    esp_err_t err = i2s_read(I2S_PORT, adc_buffer, BUFFER_SIZE * 2, &bytes_read, 100 / portTICK_PERIOD_MS);

    if (err == ESP_OK && bytes_read > 0) {
        uint16_t adc_value = adc_buffer[0] & 0xFFF;
        Serial.print(" ADC Value: ");
        Serial.print(adc_value);

        Serial.print(" samples: ");
        Serial.println(bytes_read);


        /*if (adc_value > 2000) { // Soglia da regolare
            rfidDetected = true;
            rfidDetectedTime = millis();
            u8g2.clearBuffer();
            u8g2.setFont(u8g2_font_ncenB08_tr);
            u8g2.drawStr(0, 10, "RFID Rilevato!");
            u8g2.setCursor(0, 30);
            u8g2.print("Valore: ");
            u8g2.print(adc_value);
            u8g2.sendBuffer();  
        } */
    } else {
        Serial.printf("Errore lettura I2S o nessun dato: %d\n", err);
    }

    // Timeout RFID
    /*if (rfidDetected && (millis() - rfidDetectedTime > rfidTimeout)) {
        rfidDetected = false;
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);
        u8g2.drawStr(0, 10, "Gattaiola ESP32");
        u8g2.drawStr(0, 20, "In attesa...");
        u8g2.sendBuffer();
    } */

    int sblack = digitalRead(pblack); // Legge lo stato del pin
    int sred = digitalRead(pred);
    int syel = digitalRead(pyellow);

    if (syel==0) statoconta^=1;

    Serial.print(sblack); 
    Serial.print(sred); 
    Serial.print(syel); 
    Serial.println(statoconta); 
    digitalWrite(ledverde, syel^1);

  if(statoconta==1){
    frequenza+=1000;
    if(frequenza>150000) frequenza-=49000;
  } 
  if (sblack==0) frequenza+=200;
  if (sred==0) frequenza-=200;
  if ((sblack==0)&&(sred==0)) frequenza=134200;
  
  //frequenza=134200;
  ledcSetup(PWM_CHANNEL, frequenza, 4); // Frequenza 1 Hz, risoluzione 4 bit
  Serial.print("frequenza: ");
  Serial.print(frequenza);

    delay(100);
}